library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
### grassmann / stiefel
ndata = 5
data = array(0,c(4,2,ndata))
for (i in 1:ndata){
tgt = matrix(rnorm(4*4),nrow=4)
data[,,i] = qr.Q(qr(tgt))[,1:2]
}
A = pdist(riemfactory(data,name="grassmann"))
B = pdist(riemfactory(data,name="grassmann"))
A
B
library(microbenchmark)
microbenchmark(A = pdist(riemfactory(data,name="grassmann")), B = pdist_parallel(riemfactory(data,name="grassmann")))
ndata = 1000
data = array(0,c(4,2,ndata))
for (i in 1:ndata){
tgt = matrix(rnorm(4*4),nrow=4)
data[,,i] = qr.Q(qr(tgt))[,1:2]
}
## run pdist
microbenchmark(A = pdist(riemfactory(data,name="grassmann")), B = pdist_parallel(riemfactory(data,name="grassmann")))
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
A = matrix(rnorm(25),nrow=5)
A = A%*%t(A)
A
B = solve(A, diag(rep(1,5)))
B
eigen(B)
eigen(A)
library(RiemBase)
library(RiemBase)
library(RiemBase)
x = rbind(matrix(rnorm(25),nrow=5), matrix(rnorm(25)+10,nrow=5), matrix(rnorm(25)-10,nrow=5))
dmat = as.matrix(dist(x))
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
eigL$values
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
plot(top2)
plot(low2)
par(mfrow=c(1,2))
plot(top2)
plot(low2)
image(D)
dim(dmat)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 10
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 10
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,15:14]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 0.01
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,15:14]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,15:14]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(10*5)-10,ncol=5),matrix(rnorm(10*5),ncol=5),matrix(rnorm(10*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
x = rbind(matrix(rnorm(100*5)-10,ncol=5),matrix(rnorm(100*5),ncol=5),matrix(rnorm(100*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
eigL$values
x = rbind(matrix(rnorm(5*5)-10,ncol=5),matrix(rnorm(5*5),ncol=5),matrix(rnorm(5*5)+10,ncol=5))
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
eigL$values
Rank(L)
library(Matrix)
rankMatrix(L)
x = rbind(matrix(rnorm(5*5)-10,ncol=5),matrix(rnorm(5*5),ncol=5),matrix(rnorm(5*5)+10,ncol=5))
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,14:13]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
rankMatrix(L)
eigL$values
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,12:11]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
eigL$values
eigL$vectors[,12:13]
plot(eigL$vectors[,12])
plot(eigL$vectors[,13])
plot(eigL$vectors[,14])
plot(eigL$vectors[,15])
plot(eigL$vectors[,16])
x = rbind(matrix(rnorm(5*5)-10,ncol=5),matrix(rnorm(5*5),ncol=5))
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,10:9]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
rankMatrix(L)
plot(eigL$vectors[,8:7])
plot(eigL$vectors[,10])
dim(L)
plot(eigL$vectors[,9])
plot(eigL$vectors[,8
])
x = rbind(matrix(rnorm(5*5)-10,ncol=5),matrix(rnorm(5*5),ncol=5))
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,10:9]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
install.packages("mlbench")
library(mlbench)
set.seed(111)
obj <- mlbench.spirals(100,1,0.025)
my.data <-  4 * obj$x
plot(my.data)
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,10:9]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
dim(x)
set.seed(111)
obj <- mlbench.spirals(100,1,0.025)
x <-  4 * obj$x
dim(x)
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,10:9]
plot(eigL$vectors[,100])
dim(L)
plot(eigL$vectors[,99])
plot(eigL$vectors[,98])
eigL$values
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,100:99]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
set.seed(111)
obj <- mlbench.spirals(100,1,0.025)
x <-  4 * obj$x
sigma = 1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,100:99]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,99:98]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,98:97]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
# constant eigenvector is ignored.
sigma = 0.1
dmat = as.matrix(dist(x))
A = exp(-(dmat^2)/(sigma^2))
diag(A)=0
D = diag(rowSums(A))
L = D-A
eigL = eigen(L)
top2 = eigL$vectors[,1:2]
low2 = eigL$vectors[,98:97]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
# constant eigenvector is ignored.
low2 = eigL$vectors[,100:99]
par(mfrow=c(1,2))
plot(top2)
plot(low2)
# constant eigenvector is ignored.
eigL$values
install.packages("kernlab")
library(kernlab)
help(specc)
x
out = kernlab::specc(x)
out = kernlab::specc(x, 2)
out
data(spirals)
sc <- specc(spirals, centers=2)
centers(sc)
size(sc)
withinss(sc)
plot(spirals, col=sc)
help(specc)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
a = matrix(rnorm(9),nrow=3)
b = matrix(rnorm(9),nrow=3)
a = a%*%t(a)
b= t(b)%*%b
solve(a,b)
a
b
sol = solve(a,b)
cXY = expm::logm(sol)
cXY
XY = cXY
trace(XY%*%XY)
library(RiemBase)
library(RiemBase)
library(RiemBase)
usethis::use_readme_rmd()
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
devtools::check(manual=TRUE)
pack <- "RiemBase"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "RiemBase"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(RiemBase)
pack <- "RiemBase"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(RiemBase)
library(RiemBase)
library(RiemBase)
pack <- "RiemBase"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
check(manual=TRUE)
devtools::check(manual=TRUE)
help(rbase.curvedist)
help(Rdpack)
help(rbase.mean)
??insertRef
library(RiemBase)
help("rbase.mean")
library(RiemBase)
devtools::check(manual=TRUE)
install.packages(c("bootnet", "emmeans", "hmeasure", "irlba", "lme4", "mgm", "NetworkToolbox", "raster", "urltools", "vegan"))
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
