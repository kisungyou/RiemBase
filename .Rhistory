lapply(matrix, function(x){(norm(x%*%t(x)-diag(ncol(x)) < 1e-5)})
lapply(matrix, function(x){(norm(x%*%t(x)-diag(ncol(x)) < 1e-5))})
lapply(matrix, function(x){(norm(t(x)%*%x-diag(ncol(x)) < 1e-5))})
lapply(data, function(x){(norm(t(x)%*%x-diag(ncol(x)) < 1e-5))})
islist_stiefel <- function(data){
if (!is.null(nrow(data[[1]]))){ # if a matrix
cond1 = (length(unique(unlist(lapply(data, nrow))))==1)
cond2 = (length(unique(unlist(lapply(data, ncol))))==1)
cond3 = all(unlist(lapply(data, function(X){(norm(t(X)%*%X - diag(ncol(X))) < 1e-10)}))==TRUE)
if (cond1&&cond2&&cond3){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
islist_stiefel(data)
qr
?qr
newdata = list()
for (i in 1:length(data)){newdata[[i]] = qr.Q(qr(data[[i]])) }
islist_stiefel(newdata)
islist_stiefel <- function(data){
if (!is.null(nrow(data[[1]]))){ # if a matrix
cond1 = (length(unique(unlist(lapply(data, nrow))))==1)
cond2 = (length(unique(unlist(lapply(data, ncol))))==1)
cond3 = all(unlist(lapply(data, function(X){(norm(t(X)%*%X - diag(ncol(X))) < 100*.Machine$double.eps)}))==TRUE)
if (cond1&&cond2&&cond3){
return(TRUE)
} else {
return(FALSE)
}
} else {
return(FALSE)
}
}
islist_stiefel(newdata)
library(RiemBase)
riemeuc = riemfactory(data, "euclidean")
library(RiemBase)
riemeuc = riemfactory(data, "euclidean")
riemeuc
data
newdata
View(newdata)
riemfactory(newdata, stiefel)
riemfactory(newdata, "stiefel")
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
class(lm(rnorm(3)~1:3))
output = lm(rnorm(3)~1:3)
output = lm(rnorm(3)~c(1,2,3))
class(output)
(class(output)!="lm")
library(RiemBase)
hey = list()
for (i in 1:5){tgt=rnorm(3);tgt=tgt/sqrt(sum(tgt^2));hey[[i]]=tgt}
dd = riemfactory(hey, name="Sphere")
aux_stack3d <- function(riemdata){
msize = riemdata$size
ndata = length(riemdata$data)
matdata = array(0,c(msize[1], msize[2], ndata))
for (i in 1:ndata){
matdata[,,i] = riemdata$data[i]
}
return(matdata)
}
aux_stack3d(dd)
dd
dd$data[[1]]
riemdata = dd
msize = riemdata$size
ndata = length(riemdata$data)
matdata = array(0,c(msize[1], msize[2], ndata))
matdata
for (i in 1:ndata){
matdata[,,i] = riemdata$data[i]
}
i
ndata
matdata
matdata = array(0,c(msize[1], msize[2], ndata))
for (i in 1:ndata){
matdata(,,i) = riemdata$data[i]
}
matdata = array(0,c(msize[1], msize[2], ndata))
for (i in 1:ndata){
matdata[,,i] = riemdata$data[i]
}
matdata
dim(matdata)
matdata
matdata = array(0,c(msize[1], msize[2], ndata))
matdata = array(0,c(msize[1], msize[2], ndata))
for (i in 1:ndata){
matdata[,,i] = as.matrix(riemdata$data[i])
}
matdata = array(0,c(msize[1], msize[2], ndata))
for (i in 1:ndata){
matdata[,,i] = (riemdata$data[[i]])
}
matdata
rm(list=ls())
library(RiemBase)
x = c(1,2)
y = c(3,2)
any(x!=y)
library(RiemBase)
help(as.dist)
library(RiemBase)
library(RiemBase)
X = matrix(abs(rnorm(9)),nrow=3)
as.dist(X)
X
rm(list=ls())
library(RiemBase)
hey = list(0)
hey
for (i in 1:5){tgt=rnorm(5);tgt=tgt/norm(as.matrix(tgt)); hey[[i]] = tgt}
hey
dd = riemfactory(hey, name="sphere")
dd = riemfactory(hey, name="Sphere")
for (i in 1:5){tgt=rnorm(5);tgt=tgt/norm(as.matrix(tgt),"fro"); hey[[i]] = tgt}
for (i in 1:5){tgt=rnorm(5);tgt=tgt/sqrt(sum(tgt^2)); hey[[i]] = tgt}
dd = riemfactory(hey, name="Sphere")
dd
help(match.arg)
x = "ee"
match.arg(x, c("ff","gg","ee"))
match.arg(x, c("ff","gg","kk"))
############################################################
## MANIFOLD TYPE MATCHING
allnames = tolower(c("Euclidean","Grassman","SPD","Sphere","Stiefel"))
allnames
library(RiemBase)
hey
riemfactory(hey, name="euCLIdean")
acos
?acos
acos(1)
acos(0)
acos(-1)
acos(pi)
library(RiemBase)
dd
library(RiemBase)
pdist2(dd,dd)
pdist1(dd)
pdist(dd)
acos(sum(dd$data[[1]]*dd$data[[2]]))
help(geinge)
help(geigen)
library(geigen)
help(geigen)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(expm)
help(expm)
library(RiemBase)
library(CovTools)
help("CovDist")
library(RiemBase)
samples = samplecovs(4,3)
pdist2(riemfactory(samples, "SPD"))
dim(samples)
slist = list()
for (i in 1:4){slist[[i]] = as.matrix(samples[,,i])}
pdist2(riemfactory(slist, "SPD"))
pdist2(riemfactory(slist, name="SPD"))
pdist(riemfactory(slist, name="SPD"))
#-------------------------------------------------------
# must be of 'riemdata' class
output = switch(mfdname,
euclidean = pdist2_euclidean(newdata1, newdata2),
sphere    = pdist2_sphere(newdata1, newdata2),
spd       = pdist2_spd(newdata1, newdata2)
)
pdist(riemfactory(slist, name="SPD"))
CovDist(samples, method="AIRM")
CovDist(samples, method="LERM")
library(RiemBase)
listS
list
ls
ls -a
slist
for (i in 1:4){tgt = slist[[i]]; slist[[i]] = qr.Q(qr(tgt))}
pdist(riemfactory(slist, name="stiefel"))
library(RiemBase)
pdist(riemfactory(slist, name="stiefel"))
x = slist[[1]]
y = slist[[2]]
x
y
t(x)%*%x
svd(t(x)%*%x)
svd(t(x)%*%y)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
slist
pdist(riemfactory(slist, name="grassman"))
rm(list=ls())
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
x = array(1:(2*3*4), c(2,3,4))
pdist(x)
xx = riemfactory(x)
x
xx = riemfactory(x, name="euclidean")
xx = riemfactory(x, dname="euclidean")
library(RiemBase)
xx = riemfactory(x, dname="euclidean")
xx = riemfactory(x, name="euclidean")
pdist(xx)
library(RiemBase)
pdist(xx)
library(RiemBase)
library(RiemBase)
pdist(xx)
library(RiemBase)
library(RiemBase)
library(RiemBase)
data = array(0,c(4,2,5))
for (i in 1:5){
tgt = matrix(rnorm(4*4),nrow=4)
data[,,i] = qr.Q(qr(tgt))[,1:2]
}
pdist(riemfactory(data,name="grassmann"))
pdist(riemfactory(data,name="stiefel"))
library(RiemBase)
pdist(riemfactory(data,name="stiefel"))
pdist(riemfactory(data,name="grassmann"))
rm(list=ls())
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
?det
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
??pdist
library(RiemBase)
library(RiemBase)
### grassmann / stiefel
data = array(0,c(4,2,5))
for (i in 1:5){
tgt = matrix(rnorm(4*4),nrow=4)
data[,,i] = qr.Q(qr(tgt))[,1:2]
}
## run pdist
riem.pdist(riemfactory(data,name="grassmann"))
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
median(rnorm(10))
?median
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
### median around (0,1,1) for Sphere S^2
theta = seq(from=-0.95,to=0.95,length.out=50)*pi
tmpx  = theta/2 + rnorm(50,sd=0.01)
tmpy  = theta/2 + rnorm(50,sd=0.01)
data  = list()
for (i in 1:50){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
library(RiemBase)
### median around (0,1,1) for Sphere S^2
theta = seq(from=-0.95,to=0.95,length.out=50)*pi
tmpx  = theta/2 + rnorm(50,sd=0.01)
tmpy  = theta/2 + rnorm(50,sd=0.01)
data  = list()
for (i in 1:50){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
library(RiemBase)
library(RiemBase)
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
xx = output$median
norm(xx)
library(RiemBase)
### median around (0,1,1) for Sphere S^2
theta = seq(from=-0.95,to=0.95,length.out=50)*pi
tmpx  = cos(theta)/5 + rnorm(50,sd=0.01)
tmpy  = sin(theta)/5 + rnorm(50,sd=0.01)
data  = list()
for (i in 1:50){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
xx = output$median
xx
norm(xx,"fro")
norm(xx,"f")
library(RiemBase)
plot(cos(theta)/5, sin(theta)/5)
plot(cos(theta)/5+rnorm(50,sd=0.01), sin(theta)/5+rnorm(50,sd=0.01))
theta = seq(from=-0.95,to=0.95,length.out=50)*pi
tmpx  = cos(theta)/5 + rnorm(50,sd=0.1)
tmpy  = sin(theta)/5 + rnorm(50,sd=0.1)
data  = list()
for (i in 1:50){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
norm(output$median)
### median around (0,1,1) for Sphere S^2
theta = seq(from=-0.95,to=0.95,length.out=50)*pi
tmpx  = cos(theta)/5 + rnorm(50,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(50,sd=0.05)
data  = list()
for (i in 1:50){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
norm(output$median,"f")
norm(output$median)
norm(output$median,"f")
output$median
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
library(RiemBase)
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
output$median
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
output$iteration
points(output$median[1:2])
?points
output$iteration
library(RiemBase)
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
library(RiemBase)
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
}
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
output$median
rm(list=ls())
library(RiemBase)
library(RiemBase)
help(median)
### median around (0,1,1) for Sphere S^2
ndata = 100
theta = seq(from=-0.99,to=0.99,length.out=ndata)*pi
tmpx  = cos(theta)/5 + rnorm(ndata,sd=0.05)
tmpy  = sin(theta)/5 + rnorm(ndata,sd=0.05)
data  = list()
for (i in 1:ndata){
tgt = c(tmpx[i],tmpy[i],1)
data[[i]] = tgt/sqrt(sum(tgt^2)) # project onto Sphere
}
### run pdist
output = RiemBase::median(riemfactory(data,name="sphere"))
library(RiemBase)
??DEoptim
library(RiemBase)
A = matrix(rnorm(25),rnow=5)
A = matrix(rnorm(25),nrow=5)
B = matrix(runif(25),nrow=5)
A = A%*%t(A)
B = B%*%t(B)
solve(A,B)
rm(list=ls())
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
?riemfactory
X = array(1:(2*3*4),c(2,3,4))
x = riemfactory(X)
x
names(x)
library(RiemBase)
library(RiemBase)
??stats::median
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
library(RiemBase)
